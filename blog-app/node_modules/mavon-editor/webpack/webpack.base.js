/**
 * @Author: HuaChao Chen <CHC>
 * @Date:   2017-05-07T20:11:11+08:00
 * @Email:  chenhuachaoxyz@gmail.com
 * @Filename: webpack.base.js
 * @Last modified by:   chc
 * @Last modified time: 2017-11-26T22:25:40+08:00
 * @License: MIT
 * @Copyright: 2017
 */

var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var WebpackMd5Hash = require('webpack-md5-hash');
// 該插件是對“webpack-md5-hash”的改進：在主文件中獲取到各異步模塊的hash值，然後將這些hash值與主文件的代碼內容一同作爲計算hash的參數，這樣就能保證主文件的hash值會跟隨異步模塊的修改而修改。
// var WebpackSplitHash = require('webpack-split-hash');
// 壓縮css
var OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
var CopyWebpackPlugin = require('copy-webpack-plugin');
var fs = require("fs");
// var postcss = require('postcss-loader')

const extractCSS = new ExtractTextPlugin('css/[name].css');
module.exports = {
    module: {
        rules: [
            {
                test: /\.vue$/,
                loader: 'vue-loader',
                options: {
                    postcss: [
                        require('autoprefixer')({
                            browsers: ['last 10 Chrome versions', 'last 5 Firefox versions', 'Safari >= 6', 'ie > 8']
                        })
                    ]
                }
            },
            {
                test: /\.js$/,
                loader: 'babel-loader',
                // exclude: /.*node_modules((?!auto-textarea).)*$/
                // exclude: /node_modules/
                include: [
                    path.resolve(__dirname, '../src'),
                    fs.realpathSync('node_modules/auto-textarea')
                ]
            },
            {
                test: /\.(png|jpg|gif)$/,
                loader: 'file-loader',
                options: { name: '[name].[ext]?[hash]' }
            },
            { test: /\.(woff|ttf|eot|svg)/, loader: 'file-loader?name=font/[name].[ext]&publicPath=../' },
            {
                test: /\.styl$/,
                loader: 'style-loader!css-loader!stylus-loader'
            },
            {
                // css代碼分割打包
                test: /\.css$/,
                // exclude: /node_modules/,
                use: extractCSS.extract({
                    fallback: 'style-loader',
                    use: [
                        {
                            loader: 'css-loader'
                        },
                        {
                            loader: 'postcss-loader',
                            options: {
                                plugins: function() {
                                    return [
                                        // 允許在子中定義要放在最頂層的樣式
                                        require('postcss-atroot')({}),
                                        // 允許定義樣式函數
                                        require('postcss-mixins')({}),
                                        // import插件
                                        require('postcss-nested-import')({}),
                                        // 類sass-import插件，但是沒法嵌套導入
                                        // require('postcss-partial-import')({}),
                                        // 嵌套解析插件
                                        require('postcss-nested')({}),
                                        // 可以通過引用方式引用父/其他樣式的屬性值
                                        require('postcss-nesting')({}),
                                        // 允許自定義選擇器別名
                                        require('postcss-custom-selectors')({}),
                                        // 可自定義屬性塊別名，後面可擴充
                                        require('postcss-extend')({}),
                                        // 允許類sass的變量定義，for和each語法
                                        require('postcss-advanced-variables')({}),
                                        // 支持顏色函數color
                                        require('postcss-color-function')({}),
                                        // 支持media的變量定義
                                        require('postcss-custom-media')({}),
                                        // 支持屬性自定義
                                        require('postcss-custom-properties')({}),
                                        // 支持media的最大最小值定義 可以通過類似@media screen and (width >= 500px) and (width <= 1200px){}來書寫
                                        require('postcss-media-minmax')({}),
                                        // 支持通過@引用本屬性塊的屬性
                                        require('postcss-property-lookup')({}),
                                        // maches函數，p:matches(:first-child, .special)解析爲p:first-child, p.special
                                        require('postcss-selector-matches')({}),
                                        // 支持not解析，p:not(:first-child, .special)解析爲p:not(:first-child), p:not(.special)
                                        require('postcss-selector-not')({})
                                    ];
                                }
                            }
                        }
                    ]
                })
            },{
                test: /\.md$/,
                loader: 'raw-loader'
            },{
                test: /\.less$/,
                loader: 'style-loader!css-loader!less-loader'
            }
        ]
    },
    performance: {
        hints: false
    },
    plugins: [
        // 分離css
        extractCSS,
        // 分離js可能引入的css的chunkhash計算
        new WebpackMd5Hash(),
        // 對css文件進行壓縮
        new OptimizeCssAssetsPlugin({
            assetNameRegExp: /\.css$/g,
            cssProcessor: require('cssnano'),
            cssProcessorOptions: { discardComments: { removeAll: true } },
            canPrint: true
        }),
        new CopyWebpackPlugin([{
            from: path.resolve(__dirname, '../resources/highlight.js-9.12.0'),
            to: path.resolve(__dirname, '../dist/highlightjs')
        }, {
            from: path.resolve(__dirname, '../resources/markdown'),
            to: path.resolve(__dirname, '../dist/markdown')
        }, {
            from: path.resolve(__dirname, '../node_modules/katex/dist'),
            to: path.resolve(__dirname, '../dist/katex')
        }])
    ]
}
